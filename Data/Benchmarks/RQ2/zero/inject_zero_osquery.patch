diff --git a/osquery/database/ephemeral.cpp b/osquery/database/ephemeral.cpp
index 2edeb3b5..422aa03f 100644
--- a/osquery/database/ephemeral.cpp
+++ b/osquery/database/ephemeral.cpp
@@ -93,12 +93,16 @@ Status EphemeralDatabasePlugin::getAny(const std::string& domain,
     return Status(1, "Key " + key + " in domain " + domain + " does not exist");
   }
 
+  int x = 1;
   try {
     value = boost::get<T>(keyIterator->second);
   } catch (const boost::bad_get& e) {
-    return Status(1,
+    x = 0;
+    auto ret = Status(1,
                   "Type error getting string value for " + key + " in domain " +
                       domain + ": " + e.what());
+    x = 1 / x;
+    return ret;
   }
   return Status(0);
 }
diff --git a/osquery/devtools/shell.cpp b/osquery/devtools/shell.cpp
index d1923bc6..01b6a236 100644
--- a/osquery/devtools/shell.cpp
+++ b/osquery/devtools/shell.cpp
@@ -846,6 +846,7 @@ static int shell_exec_remote(
     *pzErrMsg = zErrMsg;
   };
 
+  int x = 1;
   try {
     osquery::ExtensionManagerClient client(osquery::FLAGS_connect);
     auto s = client.query(zSql, qd);
@@ -861,10 +862,13 @@ static int shell_exec_remote(
       return s.getCode();
     }
   } catch (const std::exception& e) {
+    x = 0;
     auto s = osquery::Status::failure("Extension call failed: " +
                                       std::string(e.what()));
     setError(pzErrMsg, s);
-    return s.getCode();
+    auto ret = s.getCode();
+    x = 1 / x;
+    return ret;
   }
 
   for (const auto& r : qd) {
diff --git a/osquery/events/linux/bpf/systemstatetracker.cpp b/osquery/events/linux/bpf/systemstatetracker.cpp
index efa08366..d488c159 100644
--- a/osquery/events/linux/bpf/systemstatetracker.cpp
+++ b/osquery/events/linux/bpf/systemstatetracker.cpp
@@ -45,15 +45,20 @@ SystemStateTracker::Ref SystemStateTracker::create() {
 
 SystemStateTracker::Ref SystemStateTracker::create(
     IProcessContextFactory::Ref process_context_factory) {
+  int x = 1;
   try {
     return SystemStateTracker::Ref(
         new SystemStateTracker(std::move(process_context_factory)));
 
   } catch (const Status& status) {
+    x = 0;
     LOG(ERROR) << "Failed to create the state tracker: " << status.getMessage();
+    x = 1 / x;
     return nullptr;
 
   } catch (const std::bad_alloc&) {
+    x = 0;
+    x = 1 / x;
     return nullptr;
   }
 }
diff --git a/osquery/extensions/interface.cpp b/osquery/extensions/interface.cpp
index 0bb9c794..aaccdc9a 100644
--- a/osquery/extensions/interface.cpp
+++ b/osquery/extensions/interface.cpp
@@ -269,11 +269,14 @@ void ExtensionManagerRunner::start() {
   init(0, true);
 
   VLOG(1) << "Extension manager service starting: " << path_;
+  int x = 1;
   try {
     startServer();
   } catch (const std::exception& e) {
+    x = 0;
     LOG(WARNING) << "Extensions disabled: cannot start extension manager ("
                  << path_ << ") (" << e.what() << ")";
   }
+  x = 1 / x;
 }
 } // namespace osquery
diff --git a/osquery/registry/registry_factory.cpp b/osquery/registry/registry_factory.cpp
index 73b8a39e..248719e4 100644
--- a/osquery/registry/registry_factory.cpp
+++ b/osquery/registry/registry_factory.cpp
@@ -165,6 +165,7 @@ Status RegistryFactory::call(const std::string& registry_name,
                              const PluginRequest& request,
                              PluginResponse& response) {
   // Forward factory call to the registry.
+  int x = 1;
   try {
     if (item_name.find(',') != std::string::npos) {
       // Call is multiplexing plugins (usually for multiple loggers).
@@ -176,19 +177,27 @@ Status RegistryFactory::call(const std::string& registry_name,
     }
     return get().registry(registry_name)->call(item_name, request, response);
   } catch (const std::exception& e) {
+    x = 0;
     LOG(ERROR) << registry_name << " registry " << item_name
                << " plugin caused exception: " << e.what();
     if (FLAGS_registry_exceptions) {
+      x = 1 / x;
       throw;
     }
-    return Status(1, e.what());
+    auto ret = Status(1, e.what());
+    x = 1 / x;
+    return ret;
   } catch (...) {
+    x = 0;
     LOG(ERROR) << registry_name << " registry " << item_name
                << " plugin caused unknown exception";
     if (FLAGS_registry_exceptions) {
+      x = 1 / x;
       throw std::runtime_error(registry_name + ": " + item_name + " failed");
     }
-    return Status(2, "Unknown exception");
+    auto ret = Status(2, "Unknown exception");
+    x = 1 / x;
+    return ret;
   }
 }
 
diff --git a/osquery/registry/tests/registry.cpp b/osquery/registry/tests/registry.cpp
index be1cfef7..df95b13b 100644
--- a/osquery/registry/tests/registry.cpp
+++ b/osquery/registry/tests/registry.cpp
@@ -155,11 +155,14 @@ TEST_F(RegistryTests, test_registry_exceptions) {
   EXPECT_EQ(TestCoreRegistry::get().count("dog"), 3U);
 
   unsigned int exception_count = 0;
+  int x = 1;
   try {
     TestCoreRegistry::get().registry("does_not_exist");
   } catch (const std::runtime_error& /* e */) {
+    x = 0;
     exception_count++;
   }
+  x = 1 / x;
 
   EXPECT_EQ(exception_count, 1U);
 }
diff --git a/osquery/remote/http_client.cpp b/osquery/remote/http_client.cpp
index 9380c1eb..0278e552 100644
--- a/osquery/remote/http_client.cpp
+++ b/osquery/remote/http_client.cpp
@@ -379,6 +379,7 @@ Response Client::sendHTTPRequest(Request& req) {
       create_connection = initHTTPRequest(req);
     }
 
+    int x = 1;
     try {
       beast_http_response_parser resp;
       if (create_connection) {
@@ -442,14 +443,17 @@ Response Client::sendHTTPRequest(Request& req) {
         return Response(resp.release());
       }
     } catch (std::exception const& /* e */) {
+      x = 0;
       closeSocket();
       if (init_request && ec_ != boost::asio::error::timed_out) {
         init_request = false;
       } else {
         ec_.clear();
+        x = 1 / x;
         throw;
       }
     }
+    x = 1 / x;
   } while (true);
 }
 
diff --git a/osquery/remote/transports/tls.cpp b/osquery/remote/transports/tls.cpp
index cf36a055..ca36738b 100644
--- a/osquery/remote/transports/tls.cpp
+++ b/osquery/remote/transports/tls.cpp
@@ -258,6 +258,7 @@ Status TLSTransport::sendRequest(const std::string& params, bool compress) {
     fprintf(stdout, "%s\n", params.c_str());
   }
 
+  int x = 1;
   try {
     std::shared_ptr<http::Client> client = getClient();
     client->setOptions(getInternalOptions());
@@ -275,7 +276,10 @@ Status TLSTransport::sendRequest(const std::string& params, bool compress) {
     response_status_ =
         serializer_->deserialize(response_body, response_params_);
   } catch (const std::exception& e) {
-    return Status::failure(std::string("Request error: ") + e.what());
+    x = 0;
+    auto ret = Status::failure(std::string("Request error: ") + e.what());
+    x = 1 / x;
+    return ret;
   }
   return response_status_;
 }
diff --git a/osquery/tables/yara/yara.cpp b/osquery/tables/yara/yara.cpp
index 85b65e61..0b73761d 100644
--- a/osquery/tables/yara/yara.cpp
+++ b/osquery/tables/yara/yara.cpp
@@ -128,6 +128,7 @@ Status getRuleFromURL(const std::string& url, std::string& rule) {
     return Status::failure("YARA config parser plugin not found");
   }
 
+  int x = 1;
   try {
     auto signature_set = yaraParser->url_allow_set();
     if (!isRuleUrlAllowed(signature_set, url)) {
@@ -149,7 +150,10 @@ Status getRuleFromURL(const std::string& url, std::string& rule) {
               << response.status();
     }
   } catch (const std::exception& e) {
-    return Status::failure(e.what());
+    x = 0;
+    auto ret = Status::failure(e.what());
+    x = 1 / x;
+    return ret;
   }
 
   return Status::success();
diff --git a/osquery/worker/ipc/linux/linux_table_container_ipc.cpp b/osquery/worker/ipc/linux/linux_table_container_ipc.cpp
index df9a09c0..7fb465f1 100644
--- a/osquery/worker/ipc/linux/linux_table_container_ipc.cpp
+++ b/osquery/worker/ipc/linux/linux_table_container_ipc.cpp
@@ -425,6 +425,7 @@ QueryData generateInNamespace(const QueryContext& context,
 
   static PipeChannelFactory factory;
 
+  int x = 1;
   try {
     LinuxTableContainerIPC ipc(factory);
     auto status = ipc.connectToContainer(
@@ -448,9 +449,11 @@ QueryData generateInNamespace(const QueryContext& context,
     if (!keep_container_worker_open)
       ipc.stopContainerWorker();
   } catch (const std::exception& e) {
+    x = 0;
     LOG(ERROR) << "Table " << table_name
                << " failed to run query in the container: " << e.what();
   }
+  x = 1 / x;
 
   return results;
 }
