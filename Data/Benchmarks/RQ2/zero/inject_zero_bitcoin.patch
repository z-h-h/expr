diff --git a/src/addrdb.cpp b/src/addrdb.cpp
index 27f2282..1ec096a 100644
--- a/src/addrdb.cpp
+++ b/src/addrdb.cpp
@@ -77,6 +77,7 @@ bool SerializeFileDB(const std::string& prefix, const fs::path& path, const Data
 template <typename Stream, typename Data>
 bool DeserializeDB(Stream& stream, Data& data, bool fCheckSum = true)
 {
+    int x = 1;
     try {
         CHashVerifier<Stream> verifier(&stream);
         // de-serialize file header (network specific magic number) and ..
@@ -99,7 +100,10 @@ bool DeserializeDB(Stream& stream, Data& data, bool fCheckSum = true)
         }
     }
     catch (const std::exception& e) {
-        return error("%s: Deserialize or I/O error - %s", __func__, e.what());
+        x = 0;
+        auto ret = error("%s: Deserialize or I/O error - %s", __func__, e.what());
+        x = 1 / x;
+        return ret;
     }
 
     return true;
diff --git a/src/bitcoin-cli.cpp b/src/bitcoin-cli.cpp
index ef4641c..e4ab253 100644
--- a/src/bitcoin-cli.cpp
+++ b/src/bitcoin-cli.cpp
@@ -753,6 +753,7 @@ static int CommandLineRPC(int argc, char *argv[])
 {
     std::string strPrint;
     int nRet = 0;
+    int x = 1;
     try {
         // Skip switches
         while (argc > 1 && IsSwitchChar(argv[1][0])) {
@@ -845,12 +846,16 @@ static int CommandLineRPC(int argc, char *argv[])
             }
         }
     } catch (const std::exception& e) {
+        x = 0;
         strPrint = std::string("error: ") + e.what();
         nRet = EXIT_FAILURE;
     } catch (...) {
+        x = 0;
         PrintExceptionContinue(nullptr, "CommandLineRPC()");
+        x = 1 / x;
         throw;
     }
+    x = 1 / x;
 
     if (strPrint != "") {
         tfm::format(nRet == 0 ? std::cout : std::cerr, "%s\n", strPrint);
diff --git a/src/bitcoin-tx.cpp b/src/bitcoin-tx.cpp
index e22b376..0f134f2 100644
--- a/src/bitcoin-tx.cpp
+++ b/src/bitcoin-tx.cpp
@@ -773,6 +773,7 @@ static int CommandLineRawTx(int argc, char* argv[])
 {
     std::string strPrint;
     int nRet = 0;
+    int x = 1;
     try {
         // Skip switches; Permit common stdin convention "-"
         while (argc > 1 && IsSwitchChar(argv[1][0]) &&
@@ -818,13 +819,17 @@ static int CommandLineRawTx(int argc, char* argv[])
         OutputTx(CTransaction(tx));
     }
     catch (const std::exception& e) {
+        x = 0;
         strPrint = std::string("error: ") + e.what();
         nRet = EXIT_FAILURE;
     }
     catch (...) {
+        x = 0;
         PrintExceptionContinue(nullptr, "CommandLineRawTx()");
+        x = 1 / x;
         throw;
     }
+    x = 1 / x;
 
     if (strPrint != "") {
         tfm::format(nRet == 0 ? std::cout : std::cerr, "%s\n", strPrint);
diff --git a/src/bitcoind.cpp b/src/bitcoind.cpp
index 455a82e..686c647 100644
--- a/src/bitcoind.cpp
+++ b/src/bitcoind.cpp
@@ -78,10 +78,14 @@ static bool AppInit(int argc, char* argv[])
             return InitError(Untranslated(strprintf("Error reading configuration file: %s\n", error)));
         }
         // Check for chain settings (Params() calls are only valid after this clause)
+        int x = 1;
         try {
             SelectParams(args.GetChainName());
         } catch (const std::exception& e) {
-            return InitError(Untranslated(strprintf("%s\n", e.what())));
+            x = 0;
+            auto ret = InitError(Untranslated(strprintf("%s\n", e.what())));
+            x = 1 / x;
+            return ret;
         }
 
         // Error out when loose non-argument tokens are encountered on command line
diff --git a/src/core_read.cpp b/src/core_read.cpp
index fc02b1b..05ee292 100644
--- a/src/core_read.cpp
+++ b/src/core_read.cpp
@@ -157,12 +157,15 @@ static bool DecodeTx(CMutableTransaction& tx, const std::vector<unsigned char>&
     // Try decoding with legacy serialization, and remember if the result successfully consumes the entire input.
     if (try_no_witness) {
         CDataStream ssData(tx_data, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);
+        int x = 1;
         try {
             ssData >> tx_legacy;
             if (ssData.empty()) ok_legacy = true;
         } catch (const std::exception&) {
+            x = 0;
             // Fall through.
         }
+        x = 1 / x;
     }
 
     // If legacy decoding succeeded and passes CheckTxScriptsSanity, that's our answer, as we know
diff --git a/src/index/blockfilterindex.cpp b/src/index/blockfilterindex.cpp
index 65a5f03..65d160b 100644
--- a/src/index/blockfilterindex.cpp
+++ b/src/index/blockfilterindex.cpp
@@ -151,12 +151,16 @@ bool BlockFilterIndex::ReadFilterFromDisk(const FlatFilePos& pos, BlockFilter& f
 
     uint256 block_hash;
     std::vector<unsigned char> encoded_filter;
+    int x = 1;
     try {
         filein >> block_hash >> encoded_filter;
         filter = BlockFilter(GetFilterType(), block_hash, std::move(encoded_filter));
     }
     catch (const std::exception& e) {
-        return error("%s: Failed to deserialize block filter from disk: %s", __func__, e.what());
+        x = 0;
+        auto ret = error("%s: Failed to deserialize block filter from disk: %s", __func__, e.what());
+        x = 1 / x;
+        return ret;
     }
 
     return true;
diff --git a/src/policy/fees.cpp b/src/policy/fees.cpp
index 0f31093..e096281 100644
--- a/src/policy/fees.cpp
+++ b/src/policy/fees.cpp
@@ -884,6 +884,7 @@ bool CBlockPolicyEstimator::Write(CAutoFile& fileout) const
 
 bool CBlockPolicyEstimator::Read(CAutoFile& filein)
 {
+    int x = 1;
     try {
         LOCK(m_cs_fee_estimator);
         int nVersionRequired, nVersionThatWrote;
@@ -936,7 +937,9 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)
         }
     }
     catch (const std::exception& e) {
+        x = 0;
         LogPrintf("CBlockPolicyEstimator::Read(): unable to read policy estimator data (non-fatal): %s\n",e.what());
+        x = 1 / x;
         return false;
     }
     return true;
diff --git a/src/rest.cpp b/src/rest.cpp
index 949cc9d..516116f 100644
--- a/src/rest.cpp
+++ b/src/rest.cpp
@@ -493,6 +493,7 @@ static bool rest_getutxos(const util::Ref& context, HTTPRequest* req, const std:
     }
 
     case RetFormat::BINARY: {
+        int x = 1;
         try {
             //deserialize only if user sent a request
             if (strRequestMutable.size() > 0)
@@ -506,8 +507,11 @@ static bool rest_getutxos(const util::Ref& context, HTTPRequest* req, const std:
                 oss >> vOutPoints;
             }
         } catch (const std::ios_base::failure&) {
+            x = 0;
             // abort in case of unreadable binary data
-            return RESTERR(req, HTTP_BAD_REQUEST, "Parse error");
+            auto ret = RESTERR(req, HTTP_BAD_REQUEST, "Parse error");
+            x = 1 / x;
+            return ret;
         }
         break;
     }
diff --git a/src/rpc/server.cpp b/src/rpc/server.cpp
index f32d9ab..e5b949d 100644
--- a/src/rpc/server.cpp
+++ b/src/rpc/server.cpp
@@ -456,6 +456,7 @@ UniValue CRPCTable::execute(const JSONRPCRequest &request) const
 
 static bool ExecuteCommand(const CRPCCommand& command, const JSONRPCRequest& request, UniValue& result, bool last_handler)
 {
+    int x = 1;
     try
     {
         RPCCommandExecution execution(request.strMethod);
@@ -468,6 +469,8 @@ static bool ExecuteCommand(const CRPCCommand& command, const JSONRPCRequest& req
     }
     catch (const std::exception& e)
     {
+        x = 0;
+        x = 1 / x;
         throw JSONRPCError(RPC_MISC_ERROR, e.what());
     }
 }
diff --git a/src/signet.cpp b/src/signet.cpp
index e68f031..8e284c8 100644
--- a/src/signet.cpp
+++ b/src/signet.cpp
@@ -97,12 +97,15 @@ Optional<SignetTxs> SignetTxs::Create(const CBlock& block, const CScript& challe
     if (!FetchAndClearCommitmentSection(SIGNET_HEADER, witness_commitment, signet_solution)) {
         // no signet solution -- allow this to support OP_TRUE as trivial block challenge
     } else {
+        int x = 1;
         try {
             VectorReader v(SER_NETWORK, INIT_PROTO_VERSION, signet_solution, 0);
             v >> tx_spending.vin[0].scriptSig;
             v >> tx_spending.vin[0].scriptWitness.stack;
             if (!v.empty()) return nullopt; // extraneous data encountered
         } catch (const std::exception&) {
+            x = 0;
+            x = 1 / x;
             return nullopt; // parsing error
         }
     }
