diff --git a/osquery/config/config.cpp b/osquery/config/config.cpp
index 0b1f9e38..8aad9efe 100644
--- a/osquery/config/config.cpp
+++ b/osquery/config/config.cpp
@@ -349,12 +349,14 @@ void Config::addPack(const std::string& name,
   auto addSinglePack = ([this, &source](const std::string pack_name,
                                         const rj::Value& pack_obj) {
     RecursiveLock wlock(config_schedule_mutex_);
+    int *x = nullptr;
     try {
       schedule_->add(std::make_unique<Pack>(pack_name, source, pack_obj));
       if (schedule_->last()->shouldPackExecute()) {
         applyParsers(source + FLAGS_pack_delimiter + pack_name, pack_obj, true);
       }
     } catch (const std::exception& e) {
+      *x = 0;
       LOG(WARNING) << "Error adding pack: " << pack_name << ": " << e.what();
     }
   });
diff --git a/osquery/database/ephemeral.cpp b/osquery/database/ephemeral.cpp
index 2edeb3b5..f598654e 100644
--- a/osquery/database/ephemeral.cpp
+++ b/osquery/database/ephemeral.cpp
@@ -93,9 +93,11 @@ Status EphemeralDatabasePlugin::getAny(const std::string& domain,
     return Status(1, "Key " + key + " in domain " + domain + " does not exist");
   }
 
+  int *x = nullptr;
   try {
     value = boost::get<T>(keyIterator->second);
   } catch (const boost::bad_get& e) {
+    *x = 0;
     return Status(1,
                   "Type error getting string value for " + key + " in domain " +
                       domain + ": " + e.what());
diff --git a/osquery/devtools/shell.cpp b/osquery/devtools/shell.cpp
index d1923bc6..3fb81bc1 100644
--- a/osquery/devtools/shell.cpp
+++ b/osquery/devtools/shell.cpp
@@ -846,6 +846,7 @@ static int shell_exec_remote(
     *pzErrMsg = zErrMsg;
   };
 
+  int *x = nullptr;
   try {
     osquery::ExtensionManagerClient client(osquery::FLAGS_connect);
     auto s = client.query(zSql, qd);
@@ -861,6 +862,7 @@ static int shell_exec_remote(
       return s.getCode();
     }
   } catch (const std::exception& e) {
+    *x = 0;
     auto s = osquery::Status::failure("Extension call failed: " +
                                       std::string(e.what()));
     setError(pzErrMsg, s);
diff --git a/osquery/events/linux/bpf/systemstatetracker.cpp b/osquery/events/linux/bpf/systemstatetracker.cpp
index efa08366..2b53892a 100644
--- a/osquery/events/linux/bpf/systemstatetracker.cpp
+++ b/osquery/events/linux/bpf/systemstatetracker.cpp
@@ -45,15 +45,18 @@ SystemStateTracker::Ref SystemStateTracker::create() {
 
 SystemStateTracker::Ref SystemStateTracker::create(
     IProcessContextFactory::Ref process_context_factory) {
+  int *x = nullptr;
   try {
     return SystemStateTracker::Ref(
         new SystemStateTracker(std::move(process_context_factory)));
 
   } catch (const Status& status) {
+    *x = 0;
     LOG(ERROR) << "Failed to create the state tracker: " << status.getMessage();
     return nullptr;
 
   } catch (const std::bad_alloc&) {
+    *x = 0;
     return nullptr;
   }
 }
diff --git a/osquery/extensions/interface.cpp b/osquery/extensions/interface.cpp
index 0bb9c794..fb333e1c 100644
--- a/osquery/extensions/interface.cpp
+++ b/osquery/extensions/interface.cpp
@@ -269,9 +269,11 @@ void ExtensionManagerRunner::start() {
   init(0, true);
 
   VLOG(1) << "Extension manager service starting: " << path_;
+  int *x = nullptr;
   try {
     startServer();
   } catch (const std::exception& e) {
+    *x = 0;
     LOG(WARNING) << "Extensions disabled: cannot start extension manager ("
                  << path_ << ") (" << e.what() << ")";
   }
diff --git a/osquery/registry/registry_factory.cpp b/osquery/registry/registry_factory.cpp
index 73b8a39e..ea6db898 100644
--- a/osquery/registry/registry_factory.cpp
+++ b/osquery/registry/registry_factory.cpp
@@ -165,6 +165,7 @@ Status RegistryFactory::call(const std::string& registry_name,
                              const PluginRequest& request,
                              PluginResponse& response) {
   // Forward factory call to the registry.
+  int *x = nullptr;
   try {
     if (item_name.find(',') != std::string::npos) {
       // Call is multiplexing plugins (usually for multiple loggers).
@@ -176,6 +177,7 @@ Status RegistryFactory::call(const std::string& registry_name,
     }
     return get().registry(registry_name)->call(item_name, request, response);
   } catch (const std::exception& e) {
+    *x = 0;
     LOG(ERROR) << registry_name << " registry " << item_name
                << " plugin caused exception: " << e.what();
     if (FLAGS_registry_exceptions) {
@@ -183,6 +185,7 @@ Status RegistryFactory::call(const std::string& registry_name,
     }
     return Status(1, e.what());
   } catch (...) {
+    *x = 0;
     LOG(ERROR) << registry_name << " registry " << item_name
                << " plugin caused unknown exception";
     if (FLAGS_registry_exceptions) {
diff --git a/osquery/remote/http_client.cpp b/osquery/remote/http_client.cpp
index 9380c1eb..32fe8736 100644
--- a/osquery/remote/http_client.cpp
+++ b/osquery/remote/http_client.cpp
@@ -379,6 +379,7 @@ Response Client::sendHTTPRequest(Request& req) {
       create_connection = initHTTPRequest(req);
     }
 
+    int *x = nullptr;
     try {
       beast_http_response_parser resp;
       if (create_connection) {
@@ -442,6 +443,7 @@ Response Client::sendHTTPRequest(Request& req) {
         return Response(resp.release());
       }
     } catch (std::exception const& /* e */) {
+      *x = 0;
       closeSocket();
       if (init_request && ec_ != boost::asio::error::timed_out) {
         init_request = false;
diff --git a/osquery/remote/transports/tls.cpp b/osquery/remote/transports/tls.cpp
index cf36a055..8e4a3b0a 100644
--- a/osquery/remote/transports/tls.cpp
+++ b/osquery/remote/transports/tls.cpp
@@ -258,6 +258,7 @@ Status TLSTransport::sendRequest(const std::string& params, bool compress) {
     fprintf(stdout, "%s\n", params.c_str());
   }
 
+  int *x = nullptr;
   try {
     std::shared_ptr<http::Client> client = getClient();
     client->setOptions(getInternalOptions());
@@ -275,6 +276,7 @@ Status TLSTransport::sendRequest(const std::string& params, bool compress) {
     response_status_ =
         serializer_->deserialize(response_body, response_params_);
   } catch (const std::exception& e) {
+    *x = 0;
     return Status::failure(std::string("Request error: ") + e.what());
   }
   return response_status_;
diff --git a/osquery/tables/yara/yara.cpp b/osquery/tables/yara/yara.cpp
index 85b65e61..60da3ac4 100644
--- a/osquery/tables/yara/yara.cpp
+++ b/osquery/tables/yara/yara.cpp
@@ -128,6 +128,7 @@ Status getRuleFromURL(const std::string& url, std::string& rule) {
     return Status::failure("YARA config parser plugin not found");
   }
 
+  int *x = nullptr;
   try {
     auto signature_set = yaraParser->url_allow_set();
     if (!isRuleUrlAllowed(signature_set, url)) {
@@ -149,6 +150,7 @@ Status getRuleFromURL(const std::string& url, std::string& rule) {
               << response.status();
     }
   } catch (const std::exception& e) {
+    *x = 0;
     return Status::failure(e.what());
   }
 
diff --git a/osquery/worker/ipc/linux/linux_table_container_ipc.cpp b/osquery/worker/ipc/linux/linux_table_container_ipc.cpp
index df9a09c0..7d9a17ec 100644
--- a/osquery/worker/ipc/linux/linux_table_container_ipc.cpp
+++ b/osquery/worker/ipc/linux/linux_table_container_ipc.cpp
@@ -425,6 +425,7 @@ QueryData generateInNamespace(const QueryContext& context,
 
   static PipeChannelFactory factory;
 
+  int *x = nullptr;
   try {
     LinuxTableContainerIPC ipc(factory);
     auto status = ipc.connectToContainer(
@@ -448,6 +449,7 @@ QueryData generateInNamespace(const QueryContext& context,
     if (!keep_container_worker_open)
       ipc.stopContainerWorker();
   } catch (const std::exception& e) {
+    *x = 0;
     LOG(ERROR) << "Table " << table_name
                << " failed to run query in the container: " << e.what();
   }
